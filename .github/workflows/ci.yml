name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install PyTorch CPU
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://download.pytorch.org/whl/cpu \
            torch torchvision torchaudio

      - name: Install project deps
        run: |
          pip install -r requirements.txt --no-deps
          # tensorboard deps required by torch.utils.tensorboard
          pip install google protobuf absl-py werkzeug markdown antlr4-python3-runtime pyyaml
          pip install -e .
      - name: Import check
        run: |
          python -c "import sys; print('Python', sys.version)"
          python -c "import importlib; importlib.import_module('lstc'); print('lstc imported OK')"

      - name: Sanity check (shapes)
        env:
          PYTHONPATH: .
        run: |
          python examples/sanity_check.py

      - name: Generate toy dataset
        env:
          PYTHONPATH: .
        run: |
          python examples/gen_toy_dataset.py --out ./toy_data --subjects 3 --seq-per-subject 2 --frames 8

      - name: Train CE (toy, 1 epoch, CPU)
        env:
          PYTHONPATH: .
        run: |
          python examples/train_real.py --data-root ./toy_data --epochs 1 --batch-size 8 --seq-len 8 --device cpu

      - name: Execute quick_start_safe notebook (smoke)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m pip install -q nbconvert nbformat jupyter grpcio tensorboard-data-server
          jupyter nbconvert --to notebook --execute notebooks/quick_start_safe.ipynb \
            --output /tmp/quick_start_safe.out.ipynb --ExecutePreprocessor.timeout=600

      - name: Export TorchScript/ONNX and check TS equivalence
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m pip install -q onnx
          lstc export --ckpt runs/lstc_real/best.pt --seq-len 8 --height 64 --width 44 \
            --torchscript-out runs/export/model.ts --onnx-out runs/export/model.onnx --opset 17
          python scripts/ci_check_ts.py

      - name: ONNX equivalence (onnxruntime)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m pip install -q onnxruntime
          python scripts/ci_check_onnx.py

      - name: Upload export artifact
        uses: actions/upload-artifact@v4
        with:
          name: export-model
          path: |
            runs/export/model.ts
            runs/export/model.onnx
